<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ICE-ZE.github.io</id>
    <title>潘泽彬的博客</title>
    <updated>2021-01-31T18:25:45.906Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ICE-ZE.github.io"/>
    <link rel="self" href="https://ICE-ZE.github.io/atom.xml"/>
    <logo>https://ICE-ZE.github.io/images/avatar.png</logo>
    <icon>https://ICE-ZE.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 潘泽彬的博客</rights>
    <entry>
        <title type="html"><![CDATA[力扣第888题-公平的糖果棒交换]]></title>
        <id>https://ICE-ZE.github.io/post/li-kou-di-888-ti-gong-ping-de-tang-guo-bang-jiao-huan/</id>
        <link href="https://ICE-ZE.github.io/post/li-kou-di-888-ti-gong-ping-de-tang-guo-bang-jiao-huan/">
        </link>
        <updated>2021-01-31T17:01:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="方法一-暴力">方法一： 暴力</h1>
<pre><code class="language-C++">class Solution {
public:
    vector&lt;int&gt; fairCandySwap(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {
        int sumA = 0,sumB = 0;
        for (int i : A) {
            sumA += i;
        }
        for (int i : B) {
            sumB += i;
        }
        vector&lt;int&gt; ans;
        for (int i = 0; i &lt; A.size(); ++i) {
            for (int j = 0; j &lt; B.size(); ++j) {
                if ((sumA - A[i] + B[j]) == (sumB - B[j] + A[i])){
                    ans.push_back(A[i]);
                    ans.push_back(B[j]);
                    break;
                }
            }
            if (ans.size() &gt; 0){
                break;
            }
        }
        return ans;
    }
};
</code></pre>
<h1 id="方法二哈希">方法二：哈希</h1>
<pre><code class="language-C+=">class Solution {
public:
    vector&lt;int&gt; fairCandySwap(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {
        int sumA = 0,sumB = 0;
        for (int i : A) {
            sumA += i;
        }
        for (int i : B) {
            sumB += i;
        }
        int difference = (sumA - sumB);
        set&lt;int&gt; candySet(A.begin(),A.end());
        vector&lt;int&gt; ans;
            for (int &amp; i : B) {
                int x = i + difference/2;
                if (candySet.count(x)){
                    ans.push_back(x);
                    ans.push_back(i);
                    break;
                }
            }
        return ans;
    }
};
</code></pre>
<h1 id="方法三二分查找">方法三：二分查找</h1>
<pre><code class="language-C++">class Solution {
public:
    vector&lt;int&gt; fairCandySwap(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B){
        int sumA = 0,sumB = 0;
        for (int i : A) {
            sumA += i;
        }
        for (int i : B) {
            sumB += i;
        }
        sort(B.begin(),B.end());
        int difference = (sumA - sumB);
        vector&lt;int&gt; ans;
        for (int &amp; i : A) {
            int left = 0, right = B.size() - 1;
            while (left &lt; right){
                int mid = (right + left) / 2;
                if (B[mid] &gt; (i + difference/2)){
                    right = mid - 1;
                } else if(B[mid] &lt; (i + difference/2)){
                    left = mid + 1;
                } else{
                    ans.push_back(i);
                    ans.push_back(B[mid]);
                    return ans;
                }
            }
        }
        return ans;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[力扣第445题-分发饼干🤡]]></title>
        <id>https://ICE-ZE.github.io/post/li-kou/</id>
        <link href="https://ICE-ZE.github.io/post/li-kou/">
        </link>
        <updated>2021-01-31T08:47:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="贪心算法">贪心算法</h2>
<p>题目给出了每个孩子的胃口值和每个饼干能提供的胃口值，当饼干提供的胃口值大于孩子的胃口值时就能喂饱这个孩子，一个孩子只能吃一块饼干，题目要求给出能够喂饱的孩子数。<br>
这道题使用贪心算法进行解决，将给定的两个数组进行排序，如果最小的饼干喂不饱当前胃口值最小的孩子，那么就不可能喂饱接下来的孩子们，所以跳过这块饼干。当找到一张能喂饱这个孩子的饼干就可以跳到这个孩子。循环一次孩子和饼干，当孩子喂完了或者没有饼干了，就可以得出可以喂饱的孩子数了。C++实现代码。</p>
<pre><code class="language-C++">class Solution {
public:
    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) {
        sort(g.begin(),g.end());    //孩子胃口值排序
        sort(s.begin(),s.end());    //饼干大小排序
        int child = 0,biscuit = 0;  //当前遍历到的孩子数和饼干数
        int ans = 0;                //喂饱的孩子数
        while (child &lt; g.size() &amp;&amp; biscuit &lt; s.size()){
            if (g[child] &lt;= s[biscuit]){    //如果当前饼干可以喂饱孩子
                ans++;                      //孩子数加一
                child++;                    //跳过这个孩子
                biscuit++;                  //跳过这块饼干
            } else{                         //如果当前饼干不可以喂饱孩子
                biscuit++;                  //跳过这块饼干
            }
        }
        return ans;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[力扣第839题-相似字符串组🤡]]></title>
        <id>https://ICE-ZE.github.io/post/li-kou-di-839-ti-xiang-si-zi-fu-chuan-zu/</id>
        <link href="https://ICE-ZE.github.io/post/li-kou-di-839-ti-xiang-si-zi-fu-chuan-zu/">
        </link>
        <updated>2021-01-30T16:59:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="方法一">方法一：</h1>
<h2 id="并查集">并查集</h2>
<pre><code class="language-C++"> class Solution {
public:
    vector&lt;int&gt; bcj;
    int find(int x){
        if (bcj[x] == x){
            return x;
        } else{
            return bcj[x] = find(bcj[x]);
        }
    }
    static bool check(const string&amp; sa, const string&amp; sb, int m){
        int num = 0;
        for (int i = 0; i &lt; m; ++i) {
            if (sa[i] != sb[i]){
                num++;
            }
            if (num &gt; 2){
                return false;
            }
        }
        return true;
    }
    int numSimilarGroups(vector&lt;string&gt;&amp; strs) {
        int n = strs.size();
        int m = strs[0].size();
        bcj.resize(n);
        for (int i = 0; i &lt; n; ++i) {
            bcj[i] = i;
        }
        for (int i = 0; i &lt; n; ++i) {
            for (int j = i+1; j &lt; n; ++j) {
                int fi = find(i);
                int fj = find(j);
                if(fi == fj){
                    continue;
                }
                if (check(strs[i],strs[j],m)){
                    bcj[fi] = fj;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i &lt; n; ++i) {
            if (bcj[i] == i){
                ans++;
            }
        }
        return ans;
    }
};
</code></pre>
<h2 id=""></h2>
]]></content>
    </entry>
</feed>